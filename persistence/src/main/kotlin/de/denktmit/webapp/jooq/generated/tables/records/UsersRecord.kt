/*
 * This file is generated by jOOQ.
 */
package de.denktmit.webapp.jooq.generated.tables.records


import de.denktmit.webapp.jooq.generated.tables.UsersTable
import de.denktmit.webapp.jooq.generated.tables.interfaces.IUsers

import jakarta.persistence.Column
import jakarta.persistence.Entity
import jakarta.persistence.Id
import jakarta.persistence.Table
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.time.Instant

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Entity
@Table(
    name = "users",
    schema = "public"
)
open class UsersRecord() : UpdatableRecordImpl<UsersRecord>(UsersTable.USERS), IUsers {

    @get:Id
    @get:Column(name = "user_id", nullable = false)
    @get:NotNull
    open override var userId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    @get:Column(name = "mail", nullable = false, length = 255)
    @get:NotNull
    @get:Size(max = 255)
    open override var mail: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    @get:Column(name = "mail_verified", nullable = false)
    @get:NotNull
    open override var mailVerified: Boolean?
        set(value): Unit = set(2, value)
        get(): Boolean? = get(2) as Boolean?

    @get:Column(name = "password", nullable = false, length = 500)
    @get:NotNull
    @get:Size(max = 500)
    open override var password: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    @get:Column(name = "disabled", nullable = false)
    @get:NotNull
    open override var disabled: Boolean?
        set(value): Unit = set(4, value)
        get(): Boolean? = get(4) as Boolean?

    @get:Column(name = "locked_until", nullable = false)
    @get:NotNull
    open override var lockedUntil: Instant?
        set(value): Unit = set(5, value)
        get(): Instant? = get(5) as Instant?

    @get:Column(name = "account_valid_until", nullable = false)
    @get:NotNull
    open override var accountValidUntil: Instant?
        set(value): Unit = set(6, value)
        get(): Instant? = get(6) as Instant?

    @get:Column(name = "credentials_valid_until", nullable = false)
    @get:NotNull
    open override var credentialsValidUntil: Instant?
        set(value): Unit = set(7, value)
        get(): Instant? = get(7) as Instant?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: IUsers) {
        this.userId = from.userId
        this.mail = from.mail
        this.mailVerified = from.mailVerified
        this.password = from.password
        this.disabled = from.disabled
        this.lockedUntil = from.lockedUntil
        this.accountValidUntil = from.accountValidUntil
        this.credentialsValidUntil = from.credentialsValidUntil
        resetChangedOnNotNull()
    }

    override fun <E : IUsers> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    constructor(userId: Long? = null, mail: String? = null, mailVerified: Boolean? = null, password: String? = null, disabled: Boolean? = null, lockedUntil: Instant? = null, accountValidUntil: Instant? = null, credentialsValidUntil: Instant? = null): this() {
        this.userId = userId
        this.mail = mail
        this.mailVerified = mailVerified
        this.password = password
        this.disabled = disabled
        this.lockedUntil = lockedUntil
        this.accountValidUntil = accountValidUntil
        this.credentialsValidUntil = credentialsValidUntil
        resetChangedOnNotNull()
    }
}
