/*
 * This file is generated by jOOQ.
 */
package de.denktmit.webapp.jooq.generated.tables.records


import de.denktmit.webapp.jooq.generated.tables.UsersTable
import de.denktmit.webapp.jooq.generated.tables.interfaces.IUsers

import jakarta.persistence.Column
import jakarta.persistence.Entity
import jakarta.persistence.Id
import jakarta.persistence.Table
import jakarta.persistence.UniqueConstraint
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.time.Instant

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Entity
@Table(
    name = "users",
    schema = "public",
    uniqueConstraints = [
        UniqueConstraint(name = "users_mail_key", columnNames = [ "mail" ])
    ]
)
open class UsersRecord() : UpdatableRecordImpl<UsersRecord>(UsersTable.USERS), Record8<Long?, String?, String?, Boolean?, Instant?, Instant?, Instant?, String?>, IUsers {

    @get:Id
    @get:Column(name = "user_id", nullable = false)
    @get:NotNull
    open override var userId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    @get:Column(name = "mail", nullable = false, length = 255)
    @get:NotNull
    @get:Size(max = 255)
    open override var mail: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    @get:Column(name = "password", nullable = false, length = 500)
    @get:NotNull
    @get:Size(max = 500)
    open override var password: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    @get:Column(name = "disabled")
    open override var disabled: Boolean?
        set(value): Unit = set(3, value)
        get(): Boolean? = get(3) as Boolean?

    @get:Column(name = "locked_until", nullable = false)
    @get:NotNull
    open override var lockedUntil: Instant?
        set(value): Unit = set(4, value)
        get(): Instant? = get(4) as Instant?

    @get:Column(name = "account_valid_until", nullable = false)
    @get:NotNull
    open override var accountValidUntil: Instant?
        set(value): Unit = set(5, value)
        get(): Instant? = get(5) as Instant?

    @get:Column(name = "credentials_valid_until", nullable = false)
    @get:NotNull
    open override var credentialsValidUntil: Instant?
        set(value): Unit = set(6, value)
        get(): Instant? = get(6) as Instant?

    @get:Column(name = "role", nullable = false, length = 15)
    @get:NotNull
    @get:Size(max = 15)
    open override var role: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Long?, String?, String?, Boolean?, Instant?, Instant?, Instant?, String?> = super.fieldsRow() as Row8<Long?, String?, String?, Boolean?, Instant?, Instant?, Instant?, String?>
    override fun valuesRow(): Row8<Long?, String?, String?, Boolean?, Instant?, Instant?, Instant?, String?> = super.valuesRow() as Row8<Long?, String?, String?, Boolean?, Instant?, Instant?, Instant?, String?>
    override fun field1(): Field<Long?> = UsersTable.USERS.USER_ID
    override fun field2(): Field<String?> = UsersTable.USERS.MAIL
    override fun field3(): Field<String?> = UsersTable.USERS.PASSWORD
    override fun field4(): Field<Boolean?> = UsersTable.USERS.DISABLED
    override fun field5(): Field<Instant?> = UsersTable.USERS.LOCKED_UNTIL
    override fun field6(): Field<Instant?> = UsersTable.USERS.ACCOUNT_VALID_UNTIL
    override fun field7(): Field<Instant?> = UsersTable.USERS.CREDENTIALS_VALID_UNTIL
    override fun field8(): Field<String?> = UsersTable.USERS.ROLE
    override fun component1(): Long? = userId
    override fun component2(): String? = mail
    override fun component3(): String? = password
    override fun component4(): Boolean? = disabled
    override fun component5(): Instant? = lockedUntil
    override fun component6(): Instant? = accountValidUntil
    override fun component7(): Instant? = credentialsValidUntil
    override fun component8(): String? = role
    override fun value1(): Long? = userId
    override fun value2(): String? = mail
    override fun value3(): String? = password
    override fun value4(): Boolean? = disabled
    override fun value5(): Instant? = lockedUntil
    override fun value6(): Instant? = accountValidUntil
    override fun value7(): Instant? = credentialsValidUntil
    override fun value8(): String? = role

    override fun value1(value: Long?): UsersRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): UsersRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): UsersRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Boolean?): UsersRecord {
        set(3, value)
        return this
    }

    override fun value5(value: Instant?): UsersRecord {
        set(4, value)
        return this
    }

    override fun value6(value: Instant?): UsersRecord {
        set(5, value)
        return this
    }

    override fun value7(value: Instant?): UsersRecord {
        set(6, value)
        return this
    }

    override fun value8(value: String?): UsersRecord {
        set(7, value)
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: String?, value4: Boolean?, value5: Instant?, value6: Instant?, value7: Instant?, value8: String?): UsersRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: IUsers) {
        userId = from.userId
        mail = from.mail
        password = from.password
        disabled = from.disabled
        lockedUntil = from.lockedUntil
        accountValidUntil = from.accountValidUntil
        credentialsValidUntil = from.credentialsValidUntil
        role = from.role
        resetChangedOnNotNull()
    }

    override fun <E : IUsers> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    constructor(userId: Long? = null, mail: String? = null, password: String? = null, disabled: Boolean? = null, lockedUntil: Instant? = null, accountValidUntil: Instant? = null, credentialsValidUntil: Instant? = null, role: String? = null): this() {
        this.userId = userId
        this.mail = mail
        this.password = password
        this.disabled = disabled
        this.lockedUntil = lockedUntil
        this.accountValidUntil = accountValidUntil
        this.credentialsValidUntil = credentialsValidUntil
        this.role = role
        resetChangedOnNotNull()
    }
}
