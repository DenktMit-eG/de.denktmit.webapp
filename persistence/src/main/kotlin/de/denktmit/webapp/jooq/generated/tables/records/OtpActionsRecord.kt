/*
 * This file is generated by jOOQ.
 */
package de.denktmit.webapp.jooq.generated.tables.records


import de.denktmit.webapp.jooq.generated.tables.OtpActionsTable
import de.denktmit.webapp.jooq.generated.tables.interfaces.IOtpActions

import jakarta.persistence.Column
import jakarta.persistence.Entity
import jakarta.persistence.Id
import jakarta.persistence.Table
import jakarta.persistence.UniqueConstraint
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import java.time.Instant
import java.util.UUID

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Entity
@Table(
    name = "otp_actions",
    schema = "public",
    uniqueConstraints = [
        UniqueConstraint(name = "otp_actions_token_key", columnNames = [ "token" ])
    ]
)
open class OtpActionsRecord() : UpdatableRecordImpl<OtpActionsRecord>(OtpActionsTable.OTP_ACTIONS), Record5<Long?, UUID?, Long?, String?, Instant?>, IOtpActions {

    @get:Id
    @get:Column(name = "action_id", nullable = false)
    @get:NotNull
    open override var actionId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    @get:Column(name = "token", nullable = false)
    @get:NotNull
    open override var token: UUID?
        set(value): Unit = set(1, value)
        get(): UUID? = get(1) as UUID?

    @get:Column(name = "user_id", nullable = false)
    @get:NotNull
    open override var userId: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    @get:Column(name = "action", nullable = false, length = 25)
    @get:NotNull
    @get:Size(max = 25)
    open override var action: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    @get:Column(name = "valid_until", nullable = false)
    @get:NotNull
    open override var validUntil: Instant?
        set(value): Unit = set(4, value)
        get(): Instant? = get(4) as Instant?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Long?, UUID?, Long?, String?, Instant?> = super.fieldsRow() as Row5<Long?, UUID?, Long?, String?, Instant?>
    override fun valuesRow(): Row5<Long?, UUID?, Long?, String?, Instant?> = super.valuesRow() as Row5<Long?, UUID?, Long?, String?, Instant?>
    override fun field1(): Field<Long?> = OtpActionsTable.OTP_ACTIONS.ACTION_ID
    override fun field2(): Field<UUID?> = OtpActionsTable.OTP_ACTIONS.TOKEN
    override fun field3(): Field<Long?> = OtpActionsTable.OTP_ACTIONS.USER_ID
    override fun field4(): Field<String?> = OtpActionsTable.OTP_ACTIONS.ACTION
    override fun field5(): Field<Instant?> = OtpActionsTable.OTP_ACTIONS.VALID_UNTIL
    override fun component1(): Long? = actionId
    override fun component2(): UUID? = token
    override fun component3(): Long? = userId
    override fun component4(): String? = action
    override fun component5(): Instant? = validUntil
    override fun value1(): Long? = actionId
    override fun value2(): UUID? = token
    override fun value3(): Long? = userId
    override fun value4(): String? = action
    override fun value5(): Instant? = validUntil

    override fun value1(value: Long?): OtpActionsRecord {
        set(0, value)
        return this
    }

    override fun value2(value: UUID?): OtpActionsRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Long?): OtpActionsRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): OtpActionsRecord {
        set(3, value)
        return this
    }

    override fun value5(value: Instant?): OtpActionsRecord {
        set(4, value)
        return this
    }

    override fun values(value1: Long?, value2: UUID?, value3: Long?, value4: String?, value5: Instant?): OtpActionsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: IOtpActions) {
        actionId = from.actionId
        token = from.token
        userId = from.userId
        action = from.action
        validUntil = from.validUntil
        resetChangedOnNotNull()
    }

    override fun <E : IOtpActions> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised OtpActionsRecord
     */
    constructor(actionId: Long? = null, token: UUID? = null, userId: Long? = null, action: String? = null, validUntil: Instant? = null): this() {
        this.actionId = actionId
        this.token = token
        this.userId = userId
        this.action = action
        this.validUntil = validUntil
        resetChangedOnNotNull()
    }
}
