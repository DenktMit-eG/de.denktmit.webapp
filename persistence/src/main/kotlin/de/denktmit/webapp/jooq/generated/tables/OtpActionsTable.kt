/*
 * This file is generated by jOOQ.
 */
package de.denktmit.webapp.jooq.generated.tables


import de.denktmit.webapp.jooq.generated.Public
import de.denktmit.webapp.jooq.generated.keys.OTP_ACTIONS_PKEY
import de.denktmit.webapp.jooq.generated.keys.OTP_ACTIONS_TOKEN_KEY
import de.denktmit.webapp.jooq.generated.keys.OTP_ACTIONS__FK_OTP_ACTION_USER
import de.denktmit.webapp.jooq.generated.tables.UsersTable.UsersPath
import de.denktmit.webapp.jooq.generated.tables.records.OtpActionsRecord

import java.time.Instant
import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class OtpActionsTable(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, OtpActionsRecord>?,
    parentPath: InverseForeignKey<out Record, OtpActionsRecord>?,
    aliased: Table<OtpActionsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<OtpActionsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.otp_actions</code>
         */
        val OTP_ACTIONS: OtpActionsTable = OtpActionsTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<OtpActionsRecord> = OtpActionsRecord::class.java

    /**
     * The column <code>public.otp_actions.action_id</code>. Unique identifier
     * for the OTP
     */
    val ACTION_ID: TableField<OtpActionsRecord, Long?> = createField(DSL.name("action_id"), SQLDataType.BIGINT.nullable(false), this, "Unique identifier for the OTP")

    /**
     * The column <code>public.otp_actions.token</code>.
     */
    val TOKEN: TableField<OtpActionsRecord, UUID?> = createField(DSL.name("token"), SQLDataType.UUID.nullable(false), this, "")

    /**
     * The column <code>public.otp_actions.user_id</code>. The user to execute
     * this OTP guarded action for
     */
    val USER_ID: TableField<OtpActionsRecord, Long?> = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "The user to execute this OTP guarded action for")

    /**
     * The column <code>public.otp_actions.action</code>. The action descriptor,
     * e.g. 'activate'
     */
    val ACTION: TableField<OtpActionsRecord, String?> = createField(DSL.name("action"), SQLDataType.VARCHAR(25).nullable(false), this, "The action descriptor, e.g. 'activate'")

    /**
     * The column <code>public.otp_actions.valid_until</code>. Timestamp when
     * the OTP expires
     */
    val VALID_UNTIL: TableField<OtpActionsRecord, Instant?> = createField(DSL.name("valid_until"), SQLDataType.INSTANT.nullable(false), this, "Timestamp when the OTP expires")

    private constructor(alias: Name, aliased: Table<OtpActionsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<OtpActionsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<OtpActionsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.otp_actions</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.otp_actions</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.otp_actions</code> table reference
     */
    constructor(): this(DSL.name("otp_actions"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, OtpActionsRecord>?, parentPath: InverseForeignKey<out Record, OtpActionsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, OTP_ACTIONS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class OtpActionsPath : OtpActionsTable, Path<OtpActionsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, OtpActionsRecord>?, parentPath: InverseForeignKey<out Record, OtpActionsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<OtpActionsRecord>): super(alias, aliased)
        override fun `as`(alias: String): OtpActionsPath = OtpActionsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): OtpActionsPath = OtpActionsPath(alias, this)
        override fun `as`(alias: Table<*>): OtpActionsPath = OtpActionsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<OtpActionsRecord> = OTP_ACTIONS_PKEY
    override fun getUniqueKeys(): List<UniqueKey<OtpActionsRecord>> = listOf(OTP_ACTIONS_TOKEN_KEY)
    override fun getReferences(): List<ForeignKey<OtpActionsRecord, *>> = listOf(OTP_ACTIONS__FK_OTP_ACTION_USER)

    private lateinit var _users: UsersPath

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    fun users(): UsersPath {
        if (!this::_users.isInitialized)
            _users = UsersPath(this, OTP_ACTIONS__FK_OTP_ACTION_USER, null)

        return _users;
    }

    val users: UsersPath
        get(): UsersPath = users()
    override fun `as`(alias: String): OtpActionsTable = OtpActionsTable(DSL.name(alias), this)
    override fun `as`(alias: Name): OtpActionsTable = OtpActionsTable(alias, this)
    override fun `as`(alias: Table<*>): OtpActionsTable = OtpActionsTable(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): OtpActionsTable = OtpActionsTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): OtpActionsTable = OtpActionsTable(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): OtpActionsTable = OtpActionsTable(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): OtpActionsTable = OtpActionsTable(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): OtpActionsTable = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): OtpActionsTable = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): OtpActionsTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): OtpActionsTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): OtpActionsTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): OtpActionsTable = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): OtpActionsTable = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): OtpActionsTable = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): OtpActionsTable = where(DSL.notExists(select))
}
