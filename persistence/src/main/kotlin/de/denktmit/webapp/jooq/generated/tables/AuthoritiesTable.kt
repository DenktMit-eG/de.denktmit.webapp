/*
 * This file is generated by jOOQ.
 */
package de.denktmit.webapp.jooq.generated.tables


import de.denktmit.webapp.jooq.generated.Public
import de.denktmit.webapp.jooq.generated.keys.AUTHORITIES_PKEY
import de.denktmit.webapp.jooq.generated.keys.GROUP_AUTHORITIES__FK_GROUP_AUTHORITY_AUTHORITY
import de.denktmit.webapp.jooq.generated.tables.GroupAuthoritiesTable.GroupAuthoritiesPath
import de.denktmit.webapp.jooq.generated.tables.GroupsTable.GroupsPath
import de.denktmit.webapp.jooq.generated.tables.records.AuthoritiesRecord

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AuthoritiesTable(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, AuthoritiesRecord>?,
    parentPath: InverseForeignKey<out Record, AuthoritiesRecord>?,
    aliased: Table<AuthoritiesRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<AuthoritiesRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.authorities</code>
         */
        val AUTHORITIES: AuthoritiesTable = AuthoritiesTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AuthoritiesRecord> = AuthoritiesRecord::class.java

    /**
     * The column <code>public.authorities.authority_id</code>. Unique primary
     * key for the authority
     */
    val AUTHORITY_ID: TableField<AuthoritiesRecord, Long?> = createField(DSL.name("authority_id"), SQLDataType.BIGINT.nullable(false), this, "Unique primary key for the authority")

    /**
     * The column <code>public.authorities.authority</code>. Authority's
     * descriptive unique name
     */
    val AUTHORITY: TableField<AuthoritiesRecord, String?> = createField(DSL.name("authority"), SQLDataType.VARCHAR(50).nullable(false), this, "Authority's descriptive unique name")

    private constructor(alias: Name, aliased: Table<AuthoritiesRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<AuthoritiesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<AuthoritiesRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.authorities</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.authorities</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.authorities</code> table reference
     */
    constructor(): this(DSL.name("authorities"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, AuthoritiesRecord>?, parentPath: InverseForeignKey<out Record, AuthoritiesRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, AUTHORITIES, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class AuthoritiesPath : AuthoritiesTable, Path<AuthoritiesRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, AuthoritiesRecord>?, parentPath: InverseForeignKey<out Record, AuthoritiesRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<AuthoritiesRecord>): super(alias, aliased)
        override fun `as`(alias: String): AuthoritiesPath = AuthoritiesPath(DSL.name(alias), this)
        override fun `as`(alias: Name): AuthoritiesPath = AuthoritiesPath(alias, this)
        override fun `as`(alias: Table<*>): AuthoritiesPath = AuthoritiesPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<AuthoritiesRecord> = AUTHORITIES_PKEY

    private lateinit var _groupAuthorities: GroupAuthoritiesPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.group_authorities</code> table
     */
    fun groupAuthorities(): GroupAuthoritiesPath {
        if (!this::_groupAuthorities.isInitialized)
            _groupAuthorities = GroupAuthoritiesPath(this, null, GROUP_AUTHORITIES__FK_GROUP_AUTHORITY_AUTHORITY.inverseKey)

        return _groupAuthorities;
    }

    val groupAuthorities: GroupAuthoritiesPath
        get(): GroupAuthoritiesPath = groupAuthorities()

    /**
     * Get the implicit many-to-many join path to the <code>public.groups</code>
     * table
     */
    val groups: GroupsPath
        get(): GroupsPath = groupAuthorities().groups()
    override fun `as`(alias: String): AuthoritiesTable = AuthoritiesTable(DSL.name(alias), this)
    override fun `as`(alias: Name): AuthoritiesTable = AuthoritiesTable(alias, this)
    override fun `as`(alias: Table<*>): AuthoritiesTable = AuthoritiesTable(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): AuthoritiesTable = AuthoritiesTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): AuthoritiesTable = AuthoritiesTable(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): AuthoritiesTable = AuthoritiesTable(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): AuthoritiesTable = AuthoritiesTable(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): AuthoritiesTable = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): AuthoritiesTable = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): AuthoritiesTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): AuthoritiesTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): AuthoritiesTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): AuthoritiesTable = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): AuthoritiesTable = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): AuthoritiesTable = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): AuthoritiesTable = where(DSL.notExists(select))
}
