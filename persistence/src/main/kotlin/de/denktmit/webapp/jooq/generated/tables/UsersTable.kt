/*
 * This file is generated by jOOQ.
 */
package de.denktmit.webapp.jooq.generated.tables


import de.denktmit.webapp.jooq.generated.Public
import de.denktmit.webapp.jooq.generated.keys.USERS_PKEY
import de.denktmit.webapp.jooq.generated.tables.records.UsersRecord

import java.time.Instant
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Check
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UsersTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UsersRecord>?,
    aliased: Table<UsersRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UsersRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.users</code>
         */
        val USERS: UsersTable = UsersTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UsersRecord> = UsersRecord::class.java

    /**
     * The column <code>public.users.user_id</code>. Unique primary key for the
     * user
     */
    val USER_ID: TableField<UsersRecord, Long?> = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "Unique primary key for the user")

    /**
     * The column <code>public.users.mail</code>. User's unique email address
     */
    val MAIL: TableField<UsersRecord, String?> = createField(DSL.name("mail"), SQLDataType.VARCHAR(255).nullable(false), this, "User's unique email address")

    /**
     * The column <code>public.users.mail_verified</code>. Flag to track, if
     * User's e-mail been verified
     */
    val MAIL_VERIFIED: TableField<UsersRecord, Boolean?> = createField(DSL.name("mail_verified"), SQLDataType.BOOLEAN.nullable(false), this, "Flag to track, if User's e-mail been verified")

    /**
     * The column <code>public.users.password</code>. User's hashed or encrypted
     * password
     */
    val PASSWORD: TableField<UsersRecord, String?> = createField(DSL.name("password"), SQLDataType.VARCHAR(500).nullable(false), this, "User's hashed or encrypted password")

    /**
     * The column <code>public.users.disabled</code>. User's disabled status
     * (true or false) based on administrative actions
     */
    val DISABLED: TableField<UsersRecord, Boolean?> = createField(DSL.name("disabled"), SQLDataType.BOOLEAN.nullable(false), this, "User's disabled status (true or false) based on administrative actions")

    /**
     * The column <code>public.users.locked_until</code>. User's locked status
     * (true or false) based on temporary circumstances, e.g. failed logins
     */
    val LOCKED_UNTIL: TableField<UsersRecord, Instant?> = createField(DSL.name("locked_until"), SQLDataType.INSTANT.nullable(false), this, "User's locked status (true or false) based on temporary circumstances, e.g. failed logins")

    /**
     * The column <code>public.users.account_valid_until</code>. User's account
     * expiry date, e.g. for paid time-limited access
     */
    val ACCOUNT_VALID_UNTIL: TableField<UsersRecord, Instant?> = createField(DSL.name("account_valid_until"), SQLDataType.INSTANT.nullable(false), this, "User's account expiry date, e.g. for paid time-limited access")

    /**
     * The column <code>public.users.credentials_valid_until</code>. User's
     * credentials expiry date, e.g. to enforce password change after some time
     */
    val CREDENTIALS_VALID_UNTIL: TableField<UsersRecord, Instant?> = createField(DSL.name("credentials_valid_until"), SQLDataType.INSTANT.nullable(false), this, "User's credentials expiry date, e.g. to enforce password change after some time")

    private constructor(alias: Name, aliased: Table<UsersRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UsersRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.users</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.users</code> table reference
     */
    constructor(): this(DSL.name("users"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UsersRecord>): this(Internal.createPathAlias(child, key), child, key, USERS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<UsersRecord> = USERS_PKEY
    override fun getChecks(): List<Check<UsersRecord>> = listOf(
        Internal.createCheck(this, DSL.name("users_mail_check"), "((TRIM(BOTH FROM mail) <> ''::text))", true)
    )
    override fun `as`(alias: String): UsersTable = UsersTable(DSL.name(alias), this)
    override fun `as`(alias: Name): UsersTable = UsersTable(alias, this)
    override fun `as`(alias: Table<*>): UsersTable = UsersTable(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UsersTable = UsersTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UsersTable = UsersTable(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): UsersTable = UsersTable(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<Long?, String?, Boolean?, String?, Boolean?, Instant?, Instant?, Instant?> = super.fieldsRow() as Row8<Long?, String?, Boolean?, String?, Boolean?, Instant?, Instant?, Instant?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, String?, Boolean?, String?, Boolean?, Instant?, Instant?, Instant?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, String?, Boolean?, String?, Boolean?, Instant?, Instant?, Instant?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
