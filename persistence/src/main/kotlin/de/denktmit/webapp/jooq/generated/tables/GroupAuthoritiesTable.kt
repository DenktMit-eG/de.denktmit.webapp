/*
 * This file is generated by jOOQ.
 */
package de.denktmit.webapp.jooq.generated.tables


import de.denktmit.webapp.jooq.generated.Public
import de.denktmit.webapp.jooq.generated.keys.GROUP_AUTHORITIES_PKEY
import de.denktmit.webapp.jooq.generated.keys.GROUP_AUTHORITIES__FK_GROUP_AUTHORITY_AUTHORITY
import de.denktmit.webapp.jooq.generated.keys.GROUP_AUTHORITIES__FK_GROUP_AUTHORITY_GROUP
import de.denktmit.webapp.jooq.generated.tables.records.GroupAuthoritiesRecord

import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GroupAuthoritiesTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, GroupAuthoritiesRecord>?,
    aliased: Table<GroupAuthoritiesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<GroupAuthoritiesRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.group_authorities</code>
         */
        val GROUP_AUTHORITIES: GroupAuthoritiesTable = GroupAuthoritiesTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GroupAuthoritiesRecord> = GroupAuthoritiesRecord::class.java

    /**
     * The column <code>public.group_authorities.group_id</code>. ID of the
     * group associated with this authority
     */
    val GROUP_ID: TableField<GroupAuthoritiesRecord, Long?> = createField(DSL.name("group_id"), SQLDataType.BIGINT.nullable(false), this, "ID of the group associated with this authority")

    /**
     * The column <code>public.group_authorities.authority_id</code>. ID of the
     * authority associated with this group
     */
    val AUTHORITY_ID: TableField<GroupAuthoritiesRecord, Long?> = createField(DSL.name("authority_id"), SQLDataType.BIGINT.nullable(false), this, "ID of the authority associated with this group")

    private constructor(alias: Name, aliased: Table<GroupAuthoritiesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<GroupAuthoritiesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.group_authorities</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.group_authorities</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.group_authorities</code> table reference
     */
    constructor(): this(DSL.name("group_authorities"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, GroupAuthoritiesRecord>): this(Internal.createPathAlias(child, key), child, key, GROUP_AUTHORITIES, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<GroupAuthoritiesRecord> = GROUP_AUTHORITIES_PKEY
    override fun getReferences(): List<ForeignKey<GroupAuthoritiesRecord, *>> = listOf(GROUP_AUTHORITIES__FK_GROUP_AUTHORITY_GROUP, GROUP_AUTHORITIES__FK_GROUP_AUTHORITY_AUTHORITY)

    private lateinit var _groups: GroupsTable
    private lateinit var _authorities: AuthoritiesTable

    /**
     * Get the implicit join path to the <code>public.groups</code> table.
     */
    fun groups(): GroupsTable {
        if (!this::_groups.isInitialized)
            _groups = GroupsTable(this, GROUP_AUTHORITIES__FK_GROUP_AUTHORITY_GROUP)

        return _groups;
    }

    val groups: GroupsTable
        get(): GroupsTable = groups()

    /**
     * Get the implicit join path to the <code>public.authorities</code> table.
     */
    fun authorities(): AuthoritiesTable {
        if (!this::_authorities.isInitialized)
            _authorities = AuthoritiesTable(this, GROUP_AUTHORITIES__FK_GROUP_AUTHORITY_AUTHORITY)

        return _authorities;
    }

    val authorities: AuthoritiesTable
        get(): AuthoritiesTable = authorities()
    override fun `as`(alias: String): GroupAuthoritiesTable = GroupAuthoritiesTable(DSL.name(alias), this)
    override fun `as`(alias: Name): GroupAuthoritiesTable = GroupAuthoritiesTable(alias, this)
    override fun `as`(alias: Table<*>): GroupAuthoritiesTable = GroupAuthoritiesTable(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): GroupAuthoritiesTable = GroupAuthoritiesTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GroupAuthoritiesTable = GroupAuthoritiesTable(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): GroupAuthoritiesTable = GroupAuthoritiesTable(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<Long?, Long?> = super.fieldsRow() as Row2<Long?, Long?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
