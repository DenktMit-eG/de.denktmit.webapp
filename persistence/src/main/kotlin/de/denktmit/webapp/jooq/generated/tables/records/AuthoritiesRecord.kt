/*
 * This file is generated by jOOQ.
 */
package de.denktmit.webapp.jooq.generated.tables.records


import de.denktmit.webapp.jooq.generated.tables.AuthoritiesTable
import de.denktmit.webapp.jooq.generated.tables.interfaces.IAuthorities

import jakarta.persistence.Column
import jakarta.persistence.Entity
import jakarta.persistence.Id
import jakarta.persistence.Table
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Size

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
@Entity
@Table(
    name = "authorities",
    schema = "public"
)
open class AuthoritiesRecord() : UpdatableRecordImpl<AuthoritiesRecord>(AuthoritiesTable.AUTHORITIES), IAuthorities {

    @get:Id
    @get:Column(name = "authority_id", nullable = false)
    @get:NotNull
    open override var authorityId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    @get:Column(name = "authority", nullable = false, length = 50)
    @get:NotNull
    @get:Size(max = 50)
    open override var authority: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    override fun from(from: IAuthorities) {
        this.authorityId = from.authorityId
        this.authority = from.authority
        resetChangedOnNotNull()
    }

    override fun <E : IAuthorities> into(into: E): E {
        into.from(this)
        return into
    }

    /**
     * Create a detached, initialised AuthoritiesRecord
     */
    constructor(authorityId: Long? = null, authority: String? = null): this() {
        this.authorityId = authorityId
        this.authority = authority
        resetChangedOnNotNull()
    }
}
