/*
 * This file is generated by jOOQ.
 */
package de.denktmit.webapp.jooq.generated.tables


import de.denktmit.webapp.jooq.generated.Public
import de.denktmit.webapp.jooq.generated.keys.GROUPS_PKEY
import de.denktmit.webapp.jooq.generated.keys.GROUP_AUTHORITIES__FK_GROUP_AUTHORITY_GROUP
import de.denktmit.webapp.jooq.generated.keys.GROUP_MEMBERS__FK_GROUP_MEMBER_GROUP
import de.denktmit.webapp.jooq.generated.tables.AuthoritiesTable.AuthoritiesPath
import de.denktmit.webapp.jooq.generated.tables.GroupAuthoritiesTable.GroupAuthoritiesPath
import de.denktmit.webapp.jooq.generated.tables.GroupMembersTable.GroupMembersPath
import de.denktmit.webapp.jooq.generated.tables.UsersTable.UsersPath
import de.denktmit.webapp.jooq.generated.tables.records.GroupsRecord

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GroupsTable(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, GroupsRecord>?,
    parentPath: InverseForeignKey<out Record, GroupsRecord>?,
    aliased: Table<GroupsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<GroupsRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.groups</code>
         */
        val GROUPS: GroupsTable = GroupsTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<GroupsRecord> = GroupsRecord::class.java

    /**
     * The column <code>public.groups.group_id</code>. Unique primary key for
     * the Group
     */
    val GROUP_ID: TableField<GroupsRecord, Long?> = createField(DSL.name("group_id"), SQLDataType.BIGINT.nullable(false), this, "Unique primary key for the Group")

    /**
     * The column <code>public.groups.group_name</code>. Group's unique name
     */
    val GROUP_NAME: TableField<GroupsRecord, String?> = createField(DSL.name("group_name"), SQLDataType.VARCHAR(50).nullable(false), this, "Group's unique name")

    private constructor(alias: Name, aliased: Table<GroupsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<GroupsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<GroupsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.groups</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.groups</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.groups</code> table reference
     */
    constructor(): this(DSL.name("groups"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, GroupsRecord>?, parentPath: InverseForeignKey<out Record, GroupsRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, GROUPS, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class GroupsPath : GroupsTable, Path<GroupsRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, GroupsRecord>?, parentPath: InverseForeignKey<out Record, GroupsRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<GroupsRecord>): super(alias, aliased)
        override fun `as`(alias: String): GroupsPath = GroupsPath(DSL.name(alias), this)
        override fun `as`(alias: Name): GroupsPath = GroupsPath(alias, this)
        override fun `as`(alias: Table<*>): GroupsPath = GroupsPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<GroupsRecord> = GROUPS_PKEY

    private lateinit var _groupAuthorities: GroupAuthoritiesPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.group_authorities</code> table
     */
    fun groupAuthorities(): GroupAuthoritiesPath {
        if (!this::_groupAuthorities.isInitialized)
            _groupAuthorities = GroupAuthoritiesPath(this, null, GROUP_AUTHORITIES__FK_GROUP_AUTHORITY_GROUP.inverseKey)

        return _groupAuthorities;
    }

    val groupAuthorities: GroupAuthoritiesPath
        get(): GroupAuthoritiesPath = groupAuthorities()

    private lateinit var _groupMembers: GroupMembersPath

    /**
     * Get the implicit to-many join path to the
     * <code>public.group_members</code> table
     */
    fun groupMembers(): GroupMembersPath {
        if (!this::_groupMembers.isInitialized)
            _groupMembers = GroupMembersPath(this, null, GROUP_MEMBERS__FK_GROUP_MEMBER_GROUP.inverseKey)

        return _groupMembers;
    }

    val groupMembers: GroupMembersPath
        get(): GroupMembersPath = groupMembers()

    /**
     * Get the implicit many-to-many join path to the
     * <code>public.authorities</code> table
     */
    val authorities: AuthoritiesPath
        get(): AuthoritiesPath = groupAuthorities().authorities()

    /**
     * Get the implicit many-to-many join path to the <code>public.users</code>
     * table
     */
    val users: UsersPath
        get(): UsersPath = groupMembers().users()
    override fun `as`(alias: String): GroupsTable = GroupsTable(DSL.name(alias), this)
    override fun `as`(alias: Name): GroupsTable = GroupsTable(alias, this)
    override fun `as`(alias: Table<*>): GroupsTable = GroupsTable(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): GroupsTable = GroupsTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): GroupsTable = GroupsTable(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): GroupsTable = GroupsTable(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): GroupsTable = GroupsTable(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): GroupsTable = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): GroupsTable = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): GroupsTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): GroupsTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): GroupsTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): GroupsTable = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): GroupsTable = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): GroupsTable = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): GroupsTable = where(DSL.notExists(select))
}
